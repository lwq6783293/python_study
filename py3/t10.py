#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2018/1/22 14:46
# @Author  : Weiqiang.long
# @Site    : 
# @File    : t10.py
# @Software: PyCharm

# TODO 迭代
from collections import Iterable
'''
如果给定一个 list 或 tuple，我们可以通过 for 循环来遍历这个 list 或
tuple，这种遍历我们称为迭代（Iteration）
Python 的 for 循环抽象程度要高于 Java 的 for 循环，因为
Python 的 for 循环不仅可以用在 list 或 tuple 上，还可以作用在其他可迭
代对象上。
list 这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但
是，只要是可迭代对象，无论有无下标，都可以迭代
'''

# dict进行迭代
# 因为 dict 的存储不是按照 list 的方式顺序排列，所以，迭代出的结果顺序很可能不一样
d = {'a':1, 'b':2, 'c':3 }
for key in d:
    print(key)

print('------------------------------------------------------------------------')

# 默认情况下，dict迭代的是key。如果要迭代value，可以按照下面的方式
for value in d.values():
    print(value)

print('------------------------------------------------------------------------')

# 如果要同时迭代key和value，可以按照下面的方式
for k,v in d.items():
    print(k,v)

print('------------------------------------------------------------------------')

# 由于字符串也是可迭代对象，因此，也可以作用于for循环
for ch in 'ABC':
    print(ch)

'''
所以，当我们使用 for 循环时，只要作用于一个可迭代对象， for 循环
就可以正常运行，而我们不太关心该对象究竟是 list 还是其他数据类型
'''

print('------------------------------------------------------------------------')

'''
通过collections模块的Iterable类型
可以判断一个对象是否是一个可迭代的对象
'''
# 判断str是否可迭代
print(isinstance('abc',Iterable))

print('------------------------------------------------------------------------')

# 判断list是否可迭代
print(isinstance([1,2,3],Iterable))

print('------------------------------------------------------------------------')

# 判断整数是否可迭代
print(isinstance(123,Iterable))

print('------------------------------------------------------------------------')

'''
如果要对 list 实现类似 Java 那样的下标循环怎么办？
Python 内置的 enumerate 函数可以把一个 list 变成索引-元素对，这样就
可以在 for 循环中同时迭代索引和元素本身
'''
for i,value in enumerate(['A','B','C']):
    print(i, value)

print('------------------------------------------------------------------------')

# 上面的for循环里，同事引用了两个变量，在Python里是很常见的，看下面代码
for x, y in [(1,1), (2,4), (3,9)]:
    print(x, y)

'''
小结：
任何可迭代对象都可以作用于 for 循环，包括我们自定义的数据类型，
只要符合迭代条件，就可以使用 for 循环
'''



